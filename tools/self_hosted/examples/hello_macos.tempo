// Hello World for macOS - Tempo self-hosted compiler test
module hello;

// System call numbers for macOS
const SYS_WRITE: int32 = 4;
const SYS_EXIT: int32 = 1;
const STDOUT: int32 = 1;

// External system calls (will be implemented in assembly)
extern function sys_write(fd: int32, buf: ptr<char>, count: int32) -> int32;
extern function sys_exit(status: int32) -> void;

// String length helper
@wcet(100)
function strlen(str: ptr<char>) -> int32 {
    let len = 0;
    while str[len] != 0 {
        len = len + 1;
    }
    return len;
}

// Print string to stdout
@wcet(200)
function print(str: ptr<char>) -> void {
    let len = strlen(str);
    sys_write(STDOUT, str, len);
}

// Print integer
@wcet(500)
function print_int(value: int32) -> void {
    if value == 0 {
        print("0");
        return;
    }
    
    let buffer: array<char, 12>;
    let i = 0;
    let negative = false;
    
    if value < 0 {
        negative = true;
        value = -value;
    }
    
    // Convert to string (reversed)
    while value > 0 {
        buffer[i] = '0' + (value % 10) as char;
        value = value / 10;
        i = i + 1;
    }
    
    if negative {
        print("-");
    }
    
    // Print digits in correct order
    while i > 0 {
        i = i - 1;
        let ch: array<char, 2> = [buffer[i], 0];
        print(&ch[0]);
    }
}

// Main entry point
@wcet(1000)
export function main() -> int32 {
    print("Hello from self-hosted Tempo compiler on macOS!\n");
    print("Architecture: ");
    
    #if defined(__x86_64__)
        print("x86_64");
    #else
        print("ARM64");
    #endif
    
    print("\n");
    
    // Test some arithmetic
    let a = 42;
    let b = 13;
    let sum = a + b;
    
    print("42 + 13 = ");
    print_int(sum);
    print("\n");
    
    // Test function calls
    let result = fibonacci(10);
    print("Fibonacci(10) = ");
    print_int(result);
    print("\n");
    
    return 0;
}

// Fibonacci function
@wcet(500)
function fibonacci(n: int32) -> int32 {
    if n <= 1 {
        return n;
    }
    
    let a = 0;
    let b = 1;
    let i = 2;
    
    while i <= n {
        let temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    
    return b;
}