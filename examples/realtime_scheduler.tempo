// AtomicOS Real-Time Scheduler - Tempo v3.0
// Advanced deterministic scheduling with WCET guarantees
// Advanced preemptible kernel with real-time scheduling capabilities

// =================================================================
// 1. SCHEDULING CONSTANTS AND TYPES
// =================================================================

function RT_SCHED_FIFO(): int32 { return 1 }
function RT_SCHED_RR(): int32 { return 2 }
function RT_SCHED_DEADLINE(): int32 { return 3 }
function RT_SCHED_SPORADIC(): int32 { return 4 }

function RT_MAX_TASKS(): int32 { return 64 }
function RT_MAX_PRIORITY(): int32 { return 255 }
function RT_MIN_PRIORITY(): int32 { return 1 }

function RT_TASK_STATE_READY(): int32 { return 1 }
function RT_TASK_STATE_RUNNING(): int32 { return 2 }
function RT_TASK_STATE_BLOCKED(): int32 { return 3 }
function RT_TASK_STATE_SUSPENDED(): int32 { return 4 }

// =================================================================
// 2. TASK CONTROL BLOCK (TCB) MANAGEMENT
// =================================================================

function rt_create_tcb(task_id: int32, priority: int32, period_us: int32, wcet_us: int32): int32 {
    // Validate parameters
    if task_id < 1 || task_id > RT_MAX_TASKS() { return 0 }
    if priority < RT_MIN_PRIORITY() || priority > RT_MAX_PRIORITY() { return 0 }
    if period_us <= 0 || period_us > 1000000 { return 0 }  // Max 1 second
    if wcet_us <= 0 || wcet_us > period_us { return 0 }    // WCET must be <= period
    
    // Pack TCB data into 32-bit words (simplified representation)
    let tcb_header = (task_id << 24) | (priority << 16) | (RT_TASK_STATE_READY() << 8)
    let tcb_timing = (period_us << 16) | (wcet_us & 0xFFFF)
    
    // Return TCB identifier (combines header and timing)
    return tcb_header ^ tcb_timing
}

function rt_get_task_priority(tcb_id: int32): int32 {
    // Extract priority from TCB (deterministic bit operations)
    let reconstructed_header = tcb_id  // Simplified for this example
    return (reconstructed_header >> 16) & 0xFF
}

function rt_get_task_state(tcb_id: int32): int32 {
    return (tcb_id >> 8) & 0xFF
}

function rt_set_task_state(tcb_id: int32, new_state: int32): int32 {
    if new_state < RT_TASK_STATE_READY() || new_state > RT_TASK_STATE_SUSPENDED() {
        return 0
    }
    
    // Clear old state and set new state
    let cleared_tcb = tcb_id & ~(0xFF << 8)
    let updated_tcb = cleared_tcb | (new_state << 8)
    return updated_tcb
}

// =================================================================
// 3. DEADLINE SCHEDULING (EDF - Earliest Deadline First)
// =================================================================

function rt_calculate_deadline(tcb_id: int32, current_time_us: int32): int32 {
    // Extract period from TCB timing data
    let timing_data = tcb_id  // Simplified extraction
    let period_us = (timing_data >> 16) & 0xFFFF
    
    // Calculate next deadline
    let deadline = current_time_us + period_us
    return deadline
}

function rt_edf_compare_deadlines(task1_deadline: int32, task2_deadline: int32): int32 {
    // Returns: 1 if task1 has earlier deadline, 0 otherwise
    if task1_deadline < task2_deadline { return 1 }
    return 0
}

function rt_edf_schedule(task_array: int32, num_tasks: int32, current_time_us: int32): int32 {
    // Simplified EDF scheduler for up to 4 tasks (deterministic)
    if num_tasks <= 0 || num_tasks > 4 { return 0 }
    
    let earliest_deadline = 0xFFFFFFFF
    let selected_task = 0
    
    // Task 1
    if num_tasks >= 1 {
        let task1_tcb = task_array  // Simplified array access
        let task1_deadline = rt_calculate_deadline(task1_tcb, current_time_us)
        if rt_get_task_state(task1_tcb) == RT_TASK_STATE_READY() {
            if task1_deadline < earliest_deadline {
                earliest_deadline = task1_deadline
                selected_task = 1
            }
        }
    }
    
    // Task 2
    if num_tasks >= 2 {
        let task2_tcb = task_array + 1  // Simulated array offset
        let task2_deadline = rt_calculate_deadline(task2_tcb, current_time_us)
        if rt_get_task_state(task2_tcb) == RT_TASK_STATE_READY() {
            if task2_deadline < earliest_deadline {
                earliest_deadline = task2_deadline
                selected_task = 2
            }
        }
    }
    
    // Task 3
    if num_tasks >= 3 {
        let task3_tcb = task_array + 2
        let task3_deadline = rt_calculate_deadline(task3_tcb, current_time_us)
        if rt_get_task_state(task3_tcb) == RT_TASK_STATE_READY() {
            if task3_deadline < earliest_deadline {
                earliest_deadline = task3_deadline
                selected_task = 3
            }
        }
    }
    
    // Task 4
    if num_tasks >= 4 {
        let task4_tcb = task_array + 3
        let task4_deadline = rt_calculate_deadline(task4_tcb, current_time_us)
        if rt_get_task_state(task4_tcb) == RT_TASK_STATE_READY() {
            if task4_deadline < earliest_deadline {
                earliest_deadline = task4_deadline
                selected_task = 4
            }
        }
    }
    
    return selected_task
}

// =================================================================
// 4. RATE MONOTONIC SCHEDULING (RMS)
// =================================================================

function rt_rms_assign_priority(period_us: int32): int32 {
    // Rate Monotonic: shorter period = higher priority
    // Map period to priority (inverse relationship)
    
    if period_us <= 1000 {      // <= 1ms
        return 250  // Highest priority
    }
    if period_us <= 5000 {      // <= 5ms
        return 200
    }
    if period_us <= 10000 {     // <= 10ms
        return 150
    }
    if period_us <= 50000 {     // <= 50ms
        return 100
    }
    if period_us <= 100000 {    // <= 100ms
        return 50
    }
    
    return RT_MIN_PRIORITY()    // Lowest priority for long periods
}

function rt_rms_schedulability_test(task_count: int32, total_utilization: int32): int32 {
    // Utilization in percentage (0-100)
    // RMS bound: U <= n * (2^(1/n) - 1)
    
    let rms_bound = 0
    
    if task_count == 1 { rms_bound = 100 }      // 100%
    if task_count == 2 { rms_bound = 82 }       // ~82%
    if task_count == 3 { rms_bound = 77 }       // ~77%
    if task_count == 4 { rms_bound = 75 }       // ~75%
    if task_count >= 5 { rms_bound = 69 }       // ~69% (ln(2) approximation)
    
    if total_utilization <= rms_bound { return 1 }
    return 0  // Not schedulable
}

function rt_calculate_utilization(wcet_us: int32, period_us: int32): int32 {
    // Return utilization as percentage (0-100)
    if period_us == 0 { return 100 }  // Avoid division by zero
    
    let utilization_percent = (wcet_us * 100) / period_us
    if utilization_percent > 100 { return 100 }
    
    return utilization_percent
}

// =================================================================
// 5. INTERRUPT HANDLING AND LATENCY CONTROL
// =================================================================

function RT_IRQ_PRIORITY_CRITICAL(): int32 { return 255 }
function RT_IRQ_PRIORITY_HIGH(): int32 { return 200 }
function RT_IRQ_PRIORITY_NORMAL(): int32 { return 100 }
function RT_IRQ_PRIORITY_LOW(): int32 { return 50 }

function rt_irq_set_priority(irq_number: int32, priority: int32): int32 {
    if irq_number < 0 || irq_number > 255 { return 0 }
    if priority < RT_MIN_PRIORITY() || priority > RT_MAX_PRIORITY() { return 0 }
    
    // Create IRQ descriptor
    let irq_descriptor = (irq_number << 16) | (priority & 0xFF)
    return irq_descriptor
}

function rt_irq_handler_entry(irq_descriptor: int32, timestamp_us: int32): int32 {
    let irq_number = irq_descriptor >> 16
    let irq_priority = irq_descriptor & 0xFF
    
    // Log interrupt latency (simplified)
    let entry_overhead = 5  // Assumed 5 microseconds overhead
    let adjusted_timestamp = timestamp_us + entry_overhead
    
    return adjusted_timestamp
}

function rt_irq_preemption_check(current_task_priority: int32, irq_priority: int32): int32 {
    // Returns 1 if IRQ should preempt current task
    if irq_priority > current_task_priority { return 1 }
    return 0
}

// =================================================================
// 6. MEMORY ALLOCATION FOR RT TASKS
// =================================================================

function rt_alloc_stack(task_id: int32, stack_size: int32): int32 {
    // Deterministic stack allocation
    if task_id < 1 || task_id > RT_MAX_TASKS() { return 0 }
    if stack_size < 1024 || stack_size > 65536 { return 0 }  // 1KB - 64KB
    
    // Calculate stack base (non-overlapping regions)
    let stack_base = 0x600000 + (task_id * 65536)  // 64KB per task max
    
    // Align to page boundary
    let aligned_base = (stack_base + 4095) & ~4095
    
    return aligned_base
}

function rt_setup_stack_guard(stack_base: int32, stack_size: int32): int32 {
    // Install guard page at end of stack
    let guard_page = stack_base + stack_size
    let aligned_guard = (guard_page + 4095) & ~4095
    
    // Use existing guard page system
    return install_guard_page(aligned_guard)
}

// =================================================================
// 7. WATCHDOG AND DEADLINE MONITORING
// =================================================================

function rt_watchdog_create(task_id: int32, timeout_us: int32): int32 {
    if task_id < 1 || task_id > RT_MAX_TASKS() { return 0 }
    if timeout_us <= 0 || timeout_us > 10000000 { return 0 }  // Max 10 seconds
    
    let watchdog_id = (task_id << 24) | (timeout_us & 0xFFFFFF)
    return watchdog_id
}

function rt_watchdog_kick(watchdog_id: int32, current_time_us: int32): int32 {
    let task_id = watchdog_id >> 24
    let timeout_us = watchdog_id & 0xFFFFFF
    
    // Reset watchdog timer (in real system, would update hardware timer)
    let next_deadline = current_time_us + timeout_us
    return next_deadline
}

function rt_deadline_miss_handler(task_id: int32, missed_deadline_us: int32, current_time_us: int32): int32 {
    let overrun_us = current_time_us - missed_deadline_us
    
    // Deterministic deadline miss handling
    if overrun_us <= 1000 {      // < 1ms overrun - warning
        return 1
    }
    if overrun_us <= 10000 {     // < 10ms overrun - error
        return 2
    }
    
    return 3  // Critical overrun - system action required
}

// =================================================================
// 8. INTEGRATED RT SYSTEM INITIALIZATION
// =================================================================

function rt_system_init(): int32 {
    // Initialize real-time subsystem
    
    // 1. Setup high-priority interrupt vectors
    let critical_irq = rt_irq_set_priority(0, RT_IRQ_PRIORITY_CRITICAL())  // Timer
    let network_irq = rt_irq_set_priority(1, RT_IRQ_PRIORITY_HIGH())       // Network
    
    if critical_irq == 0 || network_irq == 0 { return ERROR_INVALID_PARAM() }
    
    // 2. Create system watchdog
    let system_watchdog = rt_watchdog_create(1, 1000000)  // 1 second system watchdog
    if system_watchdog == 0 { return ERROR_INVALID_PARAM() }
    
    // 3. Test schedulability with sample task set
    let task1_util = rt_calculate_utilization(100, 1000)    // 10% utilization
    let task2_util = rt_calculate_utilization(200, 5000)    // 4% utilization
    let task3_util = rt_calculate_utilization(500, 10000)   // 5% utilization
    let total_util = task1_util + task2_util + task3_util   // 19% total
    
    let schedulable = rt_rms_schedulability_test(3, total_util)
    if schedulable == 0 { return ERROR_INVALID_PARAM() }
    
    // 4. Initialize memory regions for RT tasks
    let stack1 = rt_alloc_stack(1, 8192)   // 8KB stack for task 1
    let stack2 = rt_alloc_stack(2, 4096)   // 4KB stack for task 2
    let stack3 = rt_alloc_stack(3, 16384)  // 16KB stack for task 3
    
    if stack1 == 0 || stack2 == 0 || stack3 == 0 { return ERROR_OUT_OF_BOUNDS() }
    
    // 5. Setup stack guards
    let guard1 = rt_setup_stack_guard(stack1, 8192)
    let guard2 = rt_setup_stack_guard(stack2, 4096)
    let guard3 = rt_setup_stack_guard(stack3, 16384)
    
    if guard1 == 0 || guard2 == 0 || guard3 == 0 { return ERROR_SECURITY_VIOLATION() }
    
    return ERROR_NONE()  // RT system initialized successfully
}

// =================================================================
// 9. RUNTIME SCHEDULING INTERFACE
// =================================================================

function rt_schedule_next(current_time_us: int32): int32 {
    // Main scheduler entry point
    
    // Create sample task set for demonstration
    let task1 = rt_create_tcb(1, rt_rms_assign_priority(1000), 1000, 100)
    let task2 = rt_create_tcb(2, rt_rms_assign_priority(5000), 5000, 200)
    let task3 = rt_create_tcb(3, rt_rms_assign_priority(10000), 10000, 500)
    
    if task1 == 0 || task2 == 0 || task3 == 0 { return 0 }
    
    // Use EDF scheduling
    let task_array = task1  // Simplified representation
    let selected_task = rt_edf_schedule(task_array, 3, current_time_us)
    
    return selected_task
}