// EXAMPLE 4: Control de Flujo
// Demuestra: if/else, while, for, break, continue

fn main() -> i32 {
    let result: i32 = 0;
    
    // === IF/ELSE ===
    let age: i32 = 20;
    
    if (age >= 18) {
        result = result + 10;  // +10 por ser adulto
    } else {
        result = result + 5;   // +5 por ser menor
    }
    
    // === WHILE LOOP ===
    let counter: i32 = 0;
    while (counter < 5) {
        result = result + counter;
        counter = counter + 1;
    }
    // result += 0+1+2+3+4 = 10, total = 20
    
    // === FOR LOOP (simulado con while) ===
    let i: i32 = 0;
    while (i < 3) {
        if (i == 1) {
            i = i + 1;
            continue;  // Salta la iteración i=1
        }
        
        if (i == 10) {
            break;     // Nunca se ejecuta en este ejemplo
        }
        
        result = result + (i * 10);
        i = i + 1;
    }
    // Ejecuta para i=0 (result += 0), salta i=1, ejecuta i=2 (result += 20)
    // total = 40
    
    // === NESTED CONDITIONS ===
    let score: i32 = 85;
    
    if (score >= 90) {
        result = result + 100;
    } else if (score >= 80) {
        result = result + 50;   // +50 porque score=85
    } else if (score >= 70) {
        result = result + 25;
    } else {
        result = result + 10;
    }
    // total = 90
    
    // === COMPLEX LOGIC ===
    let is_weekend: bool = true;
    let has_homework: bool = false;
    
    if (is_weekend && !has_homework) {
        result = result + 5;    // +5 porque es fin de semana sin tarea
    }
    // total = 95
    
    return result;  // Debe ser 95
}

/*
ESTRUCTURAS DE CONTROL EN TEMPO:

1. IF/ELSE:
   - Condición siempre entre paréntesis
   - No hay "truthy/falsy" - solo bool
   - else if para múltiples condiciones

2. WHILE:
   - Loop básico con condición
   - break: sale del loop
   - continue: va a la siguiente iteración

3. FOR:
   - No hay for nativo aún
   - Se simula con while

4. OPERADORES LÓGICOS:
   - && (AND), || (OR), ! (NOT)
   - ==, !=, <, >, <=, >=

SEGURIDAD:
- No hay condiciones undefined
- Los loops deben tener condiciones verificables
- No hay fallthrough accidental

PRUEBA:
tempo run 04_control_flow.tempo
echo $?  # Debe mostrar 95
*/