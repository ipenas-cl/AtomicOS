// IO module - input/output operations
module io;

// Import core functionality
import core;
use core::strlen;

// Console colors
export const BLACK: int32 = 0;
export const BLUE: int32 = 1;
export const GREEN: int32 = 2;
export const CYAN: int32 = 3;
export const RED: int32 = 4;
export const MAGENTA: int32 = 5;
export const BROWN: int32 = 6;
export const LIGHT_GRAY: int32 = 7;
export const DARK_GRAY: int32 = 8;
export const LIGHT_BLUE: int32 = 9;
export const LIGHT_GREEN: int32 = 10;
export const LIGHT_CYAN: int32 = 11;
export const LIGHT_RED: int32 = 12;
export const LIGHT_MAGENTA: int32 = 13;
export const YELLOW: int32 = 14;
export const WHITE: int32 = 15;

// VGA text mode constants
const VGA_BUFFER: ptr<int16> = 0xB8000 as ptr<int16>;
const VGA_WIDTH: int32 = 80;
const VGA_HEIGHT: int32 = 25;

// Current cursor position
static let cursor_x: int32 = 0;
static let cursor_y: int32 = 0;
static let text_color: int32 = LIGHT_GRAY;

// Set text color
@wcet(10)
export function set_color(foreground: int32, background: int32) -> void {
    text_color = (background << 4) | (foreground & 0x0F);
}

// Clear screen
@wcet(2000)
export function clear_screen() -> void {
    let entry = (text_color << 8) | 0x20;  // Space character
    for let i = 0; i < VGA_WIDTH * VGA_HEIGHT; i = i + 1 {
        VGA_BUFFER[i] = entry;
    }
    cursor_x = 0;
    cursor_y = 0;
}

// Put character at position
@wcet(20)
export function putchar_at(c: char, x: int32, y: int32) -> void {
    if x >= 0 && x < VGA_WIDTH && y >= 0 && y < VGA_HEIGHT {
        let index = y * VGA_WIDTH + x;
        VGA_BUFFER[index] = (text_color << 8) | (c as int32);
    }
}

// Scroll screen up one line
@wcet(1600)
function scroll() -> void {
    // Move all lines up
    for let y = 0; y < VGA_HEIGHT - 1; y = y + 1 {
        for let x = 0; x < VGA_WIDTH; x = x + 1 {
            let src_index = (y + 1) * VGA_WIDTH + x;
            let dst_index = y * VGA_WIDTH + x;
            VGA_BUFFER[dst_index] = VGA_BUFFER[src_index];
        }
    }
    
    // Clear last line
    let entry = (text_color << 8) | 0x20;
    for let x = 0; x < VGA_WIDTH; x = x + 1 {
        let index = (VGA_HEIGHT - 1) * VGA_WIDTH + x;
        VGA_BUFFER[index] = entry;
    }
}

// Put character at current cursor
@wcet(50)
export function putchar(c: char) -> void {
    if c == '\n' {
        cursor_x = 0;
        cursor_y = cursor_y + 1;
    } else if c == '\r' {
        cursor_x = 0;
    } else if c == '\t' {
        cursor_x = (cursor_x + 8) & ~7;
    } else {
        putchar_at(c, cursor_x, cursor_y);
        cursor_x = cursor_x + 1;
    }
    
    // Handle line wrap
    if cursor_x >= VGA_WIDTH {
        cursor_x = 0;
        cursor_y = cursor_y + 1;
    }
    
    // Handle screen scroll
    if cursor_y >= VGA_HEIGHT {
        scroll();
        cursor_y = VGA_HEIGHT - 1;
    }
}

// Print string
@wcet(5000)
export function print(str: ptr<char>) -> void {
    let len = strlen(str);
    for let i = 0; i < len; i = i + 1 {
        putchar(str[i]);
    }
}

// Print string with newline
@wcet(5050)
export function println(str: ptr<char>) -> void {
    print(str);
    putchar('\n');
}

// Print integer
@wcet(500)
export function print_int(value: int32) -> void {
    if value == 0 {
        putchar('0');
        return;
    }
    
    let buffer: array<char, 12>;
    let i = 0;
    let negative = false;
    
    if value < 0 {
        negative = true;
        value = -value;
    }
    
    // Convert to string (reversed)
    while value > 0 {
        buffer[i] = '0' + (value % 10) as char;
        value = value / 10;
        i = i + 1;
    }
    
    // Print sign if negative
    if negative {
        putchar('-');
    }
    
    // Print digits in correct order
    while i > 0 {
        i = i - 1;
        putchar(buffer[i]);
    }
}

// Read character (stub)
@wcet(100)
export function getchar() -> char {
    // Would read from keyboard
    return 0;
}