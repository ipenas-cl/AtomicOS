// AtomicOS HTTP Server
// Copyright (c) 2025 Ignacio Peña Sepúlveda
// 
// First production service using Tempo v5.2.1!

import tempo.collections.{HashMap, RingBuffer, Channel};

// HTTP Server task with guaranteed timing
@period(100_000)    // Run every 100μs
@deadline(80_000)   // Must finish in 80μs
@core(1)            // Dedicated to Core 1
task AtomicHttpServer {
    // Request/response channels
    let request_channel: Channel<HttpRequest, 64> = Channel::new();
    let response_channel: Channel<HttpResponse, 64> = Channel::new();
    
    // Route table - O(1) lookup
    let routes: HashMap<&str, RouteHandler, 256> = HashMap::new();
    
    fn init() {
        // Register routes
        routes.insert("/", handle_root);
        routes.insert("/api/status", handle_status);
        routes.insert("/api/time", handle_time);
        routes.insert("/api/stats", handle_stats);
    }
    
    fn tick() @wcet(50_000) {  // 50μs per request max
        // Try to get request (non-blocking)
        match request_channel.try_recv() {
            Some(req) => {
                let start_cycle = get_cpu_cycles();
                
                // Route request in O(1)
                let handler = match routes.get(req.path) {
                    Some(h) => h,
                    None => handle_404,
                };
                
                // Handle request (bounded time)
                let response = handler(req);
                
                // Add timing header (for verification)
                let end_cycle = get_cpu_cycles();
                response.add_header("X-Response-Cycles", end_cycle - start_cycle);
                
                // Send response (never blocks)
                response_channel.try_send(response);
                
                // Pad to exactly 50k cycles for determinism
                wait_until_cycle(start_cycle + 50_000);
            },
            None => {
                // No requests - burn cycles for determinism
                burn_cycles(50_000);
            }
        }
    }
}

struct HttpRequest {
    method: HttpMethod,
    path: [256]char,
    headers: HashMap<&str, &str, 32>,
    body: [4096]u8,
    body_len: u32,
}

struct HttpResponse {
    status: u16,
    headers: HashMap<&str, &str, 32>,
    body: [4096]u8,
    body_len: u32,
}

enum HttpMethod {
    GET,
    POST,
    PUT,
    DELETE,
}

// Route handlers - all with guaranteed WCET
@wcet(10_000)
fn handle_root(req: HttpRequest) -> HttpResponse {
    HttpResponse {
        status: 200,
        headers: HashMap::from([
            ("Content-Type", "text/html"),
            ("X-Powered-By", "AtomicOS")
        ]),
        body: b"<h1>AtomicOS v5.1.0</h1><p>Deterministic HTTP Server</p>",
        body_len: 52,
    }
}

@wcet(8_000)
fn handle_status(req: HttpRequest) -> HttpResponse {
    let uptime = get_system_uptime();
    let cpu_usage = get_cpu_usage();
    let memory_usage = get_memory_usage();
    
    let json = format!(
        "{{\"uptime\":{},\"cpu\":{},\"memory\":{},\"deterministic\":true}}",
        uptime, cpu_usage, memory_usage
    );
    
    HttpResponse {
        status: 200,
        headers: HashMap::from([
            ("Content-Type", "application/json"),
            ("Cache-Control", "no-cache")
        ]),
        body: json.as_bytes(),
        body_len: json.len() as u32,
    }
}

@wcet(5_000)
fn handle_time(req: HttpRequest) -> HttpResponse {
    let time = get_system_time();
    let cycles = get_cpu_cycles();
    
    let json = format!(
        "{{\"timestamp\":{},\"cycles\":{},\"deterministic\":true}}",
        time, cycles
    );
    
    HttpResponse {
        status: 200,
        headers: HashMap::from([("Content-Type", "application/json")]),
        body: json.as_bytes(),
        body_len: json.len() as u32,
    }
}

@wcet(15_000)
fn handle_stats(req: HttpRequest) -> HttpResponse {
    let stats = get_system_stats();
    
    let json = format!(
        "{{\"processes\":{},\"channels\":{},\"deadline_misses\":{}}}",
        stats.process_count,
        stats.channel_count,
        stats.deadline_misses
    );
    
    HttpResponse {
        status: 200,
        headers: HashMap::from([("Content-Type", "application/json")]),
        body: json.as_bytes(),
        body_len: json.len() as u32,
    }
}

@wcet(3_000)
fn handle_404(req: HttpRequest) -> HttpResponse {
    HttpResponse {
        status: 404,
        headers: HashMap::from([("Content-Type", "text/plain")]),
        body: b"404 Not Found",
        body_len: 13,
    }
}

// Network interface task
@period(50_000)     // 50μs
@deadline(40_000)   // 40μs
@core(2)            // Network core
task NetworkInterface {
    let packet_buffer: RingBuffer<[1500]u8, 128> = RingBuffer::new();
    
    fn tick() @wcet(30_000) {
        // Receive packets from hardware
        while let Some(packet) = receive_packet() {
            match parse_packet(packet) {
                Some(http_req) => {
                    // Forward to HTTP server
                    AtomicHttpServer::request_channel.try_send(http_req);
                },
                None => {
                    // Drop invalid packet
                }
            }
        }
        
        // Send responses
        while let Some(response) = AtomicHttpServer::response_channel.try_recv() {
            let packet = serialize_http_response(response);
            send_packet(packet);
        }
    }
}

// Example usage from shell:
// atomicos> start atomic-http-server
// atomicos> monitor
// CPU: Core 1: 50% [HTTP Server], Core 2: 30% [Network]
// HTTP: 125,000 req/s, 0 deadline misses
// atomicos> curl localhost/api/status
// {"uptime":123456,"cpu":50,"memory":25,"deterministic":true}