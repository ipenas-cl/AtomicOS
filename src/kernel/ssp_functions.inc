; Stack-Smashing Protection functions generated by Tempo
; AtomicOS v0.6.1 - Deterministic Stack Protection

STACK_CANARY:
    push ebp
    mov ebp, esp
    sub esp, 16
    mov eax, 3735928559
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret

CANARY_DEAD:
    push ebp
    mov ebp, esp
    sub esp, 16
    mov eax, 3735936685
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret

ssp_init_canary:
    push ebp
    mov ebp, esp
    sub esp, 16
    ; let canary_addr = frame_base - 4
    mov eax, [ebp-4]
    push eax
    mov eax, 4
    push eax
    pop ebx
    pop eax
    sub eax, ebx
    push eax
    pop eax
    mov [ebp-4], eax
    ; Return canary_addr
    mov eax, [ebp-4]
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret

ssp_set_canary:
    push ebp
    mov ebp, esp
    sub esp, 16
    ; Check if canary_addr < 0x400000 (4MB limit)
    mov eax, [ebp-4]
    push eax
    mov eax, 4194304
    push eax
    pop ebx
    pop eax
    cmp eax, ebx
    setl al
    movzx eax, al
    push eax
    pop eax
    test eax, eax
    jz .L0
    mov eax, 0
    push eax
    pop eax
    jmp .func_end
    jmp .L1
.L0:
.L1:
    mov eax, 1
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret

ssp_check_canary:
    push ebp
    mov ebp, esp
    sub esp, 16
    ; Check if canary_addr < 0x400000 (4MB limit)
    mov eax, [ebp-4]
    push eax
    mov eax, 4194304
    push eax
    pop ebx
    pop eax
    cmp eax, ebx
    setl al
    movzx eax, al
    push eax
    pop eax
    test eax, eax
    jz .L2
    mov eax, 0
    push eax
    pop eax
    jmp .func_end
    jmp .L3
.L2:
.L3:
    mov eax, 1
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret

ssp_handle_corruption:
    push ebp
    mov ebp, esp
    sub esp, 16
    call CANARY_DEAD
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret

ssp_function_enter:
    push ebp
    mov ebp, esp
    sub esp, 16
    ; let canary_addr = ssp_init_canary(stack_pointer)
    mov eax, [ebp-4]
    push eax
    call ssp_init_canary
    add esp, 4
    push eax
    pop eax
    mov [ebp-4], eax
    ; if ssp_set_canary(canary_addr) == 0 return 0
    mov eax, [ebp-4]
    push eax
    call ssp_set_canary
    add esp, 4
    push eax
    mov eax, 0
    push eax
    pop ebx
    pop eax
    cmp eax, ebx
    sete al
    movzx eax, al
    push eax
    pop eax
    test eax, eax
    jz .L4
    mov eax, 0
    push eax
    pop eax
    jmp .func_end
    jmp .L5
.L4:
.L5:
    ; return canary_addr
    mov eax, [ebp-4]
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret

ssp_function_exit:
    push ebp
    mov ebp, esp
    sub esp, 16
    ; if ssp_check_canary(canary_addr) == 0
    mov eax, [ebp-4]
    push eax
    call ssp_check_canary
    add esp, 4
    push eax
    mov eax, 0
    push eax
    pop ebx
    pop eax
    cmp eax, ebx
    sete al
    movzx eax, al
    push eax
    pop eax
    test eax, eax
    jz .L6
    ; Stack corruption detected!
    mov eax, [ebp-4]
    push eax
    call ssp_handle_corruption
    add esp, 4
    push eax
    pop eax
    jmp .func_end
    jmp .L7
.L6:
.L7:
    mov eax, 1
    push eax
    pop eax
    jmp .func_end
.func_end:
    mov esp, ebp
    pop ebp
    ret