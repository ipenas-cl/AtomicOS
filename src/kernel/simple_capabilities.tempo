// AtomicOS Simple Capability System
// Copyright (c) 2025 Ignacio Peña Sepúlveda
// Using REAL Tempo syntax only

struct Capability {
    cap_type: i32,
    resource: i32,
    flags: i32,
}

struct Identity {
    id: i32,
    capabilities: *[64]Capability,
    cap_count: i32,
}

// Global identity table - fixed size
let identity_table: [256]Identity;

@wcet(100)
fn has_capability(identity_id: i32, cap_type: i32, resource: i32) -> i32 {
    if (identity_id >= 256) {
        return 0;
    }
    
    let identity = &identity_table[identity_id];
    let i: i32 = 0;
    
    while (i < identity.cap_count) {
        let cap = &identity.capabilities[i];
        if (cap.cap_type == cap_type && cap.resource == resource) {
            return 1;
        }
        i = i + 1;
    }
    
    return 0;
}

@wcet(200)
fn grant_capability(identity_id: i32, cap_type: i32, resource: i32, flags: i32) -> i32 {
    if (identity_id >= 256) {
        return -1;
    }
    
    let identity = &identity_table[identity_id];
    if (identity.cap_count >= 64) {
        return -1;
    }
    
    let cap = &identity.capabilities[identity.cap_count];
    cap.cap_type = cap_type;
    cap.resource = resource;
    cap.flags = flags;
    
    identity.cap_count = identity.cap_count + 1;
    
    return 0;
}