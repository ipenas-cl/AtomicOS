; Generated by Tempo v1.3.1 Compiler
; Source: src/kernel/channels.tempo
; Total WCET: 1 cycles
; Max function WCET: 1 cycles
; Trusted functions: 0

section .text
section .data
    ; Global data section

section .text
global _start

    ; Variable: SPSC
    mov eax, 0
    mov [ebp-4], eax
    ; Variable: MPSC
    mov eax, 1
    mov [ebp-8], eax
    ; Variable: SPMC
    mov eax, 2
    mov [ebp-12], eax
    ; Variable: MPMC
    mov eax, 3
    mov [ebp-16], eax

; Struct: Channel
; Size: 32 bytes

; Function: channel_init (WCET: 1 cycles, Security: 0)
channel_init:
    push ebp
    mov ebp, esp
    sub esp, 64    ; Local variable space
    ; Load variable size
    mov eax, [ebp+16]
    push eax
    ; Load variable size
    mov eax, [ebp+16]
    push eax
    mov eax, 1
    pop ebx
    sub ebx, eax
    mov eax, ebx
    pop ebx
    and eax, ebx
    push eax
    mov eax, 0
    pop ebx
    cmp ebx, eax
    setne al
    movzx eax, al
    test eax, eax
    jz .L0x600003754770_else
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x600003754770_end
.L0x600003754770_else:
.L0x600003754770_end:
    ; Access field buffer
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable buffer
    mov eax, [ebp+12]
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable size
    mov eax, [ebp+16]
    push eax
    mov eax, 1
    pop ebx
    sub ebx, eax
    mov eax, ebx
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable elem_size
    mov eax, [ebp+20]
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Access field mode
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable mode
    mov eax, [ebp+24]
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 0
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Access field read_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 0
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Access field write_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 0
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 0
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    mov eax, 0
    mov esp, ebp
    pop ebp
    ret
    ; Implicit return
    mov esp, ebp
    pop ebp
    ret

; Function: channel_send (WCET: 1 cycles, Security: 0)
channel_send:
    push ebp
    mov ebp, esp
    sub esp, 64    ; Local variable space
    ; Access field mode
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable SPSC
    mov eax, [ebp-4]
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x6000037561b0_else
    ; Variable: write
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-4], eax
    ; Variable: read
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-8], eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    ; Load variable read
    mov eax, [ebp-8]
    pop ebx
    sub ebx, eax
    mov eax, ebx
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x600003756840_else
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Access field read_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable read
    mov eax, [ebp-8]
    push eax
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    mov [ebp-8], eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    ; Load variable read
    mov eax, [ebp-8]
    pop ebx
    sub ebx, eax
    mov eax, ebx
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x600003757250_else
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x600003757250_end
.L0x600003757250_else:
.L0x600003757250_end:
    jmp .L0x600003756840_end
.L0x600003756840_else:
.L0x600003756840_end:
    ; Variable: dest
    ; Access field buffer
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    and eax, ebx
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    imul eax, ebx
    pop ebx
    add eax, ebx
    mov [ebp-12], eax
    ; Variable: i
    mov eax, 0
    mov [ebp-16], eax
.L0x600003757e90_start:
    ; Load variable i
    mov eax, [ebp-16]
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    cmp ebx, eax
    setl al
    movzx eax, al
    test eax, eax
    jz .L0x600003757e90_end
    ; Load variable dest
    mov eax, [ebp-12]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    push eax
    ; Load variable data
    mov eax, [ebp+12]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    pop ebx
    push eax
    ; Load variable dest
    mov eax, [ebp-12]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    pop ebx
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable i
    mov eax, [ebp-16]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    mov [ebp-16], eax
    jmp .L0x600003757e90_start
.L0x600003757e90_end:
    ; Inline assembly
mfence
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    mov eax, 0
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x6000037561b0_end
.L0x6000037561b0_else:
.L0x6000037561b0_end:
    ; Access field mode
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable MPSC
    mov eax, [ebp-8]
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x600003750c40_else
    ; Variable: write
    mov eax, 1
    push eax
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    lea eax, [ebp-8]    ; TODO: proper address
    push eax
    call atomic_fetch_add
    add esp, 8
    mov [ebp-20], eax
    ; Variable: read
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-24], eax
    ; Load variable write
    mov eax, [ebp-20]
    push eax
    ; Load variable read
    mov eax, [ebp-24]
    pop ebx
    sub ebx, eax
    mov eax, ebx
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    cmp ebx, eax
    setg al
    movzx eax, al
    test eax, eax
    jz .L0x600003751420_else
    mov eax, 1
    push eax
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    lea eax, [ebp-8]    ; TODO: proper address
    push eax
    call atomic_fetch_sub
    add esp, 8
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x600003751420_end
.L0x600003751420_else:
.L0x600003751420_end:
    ; Variable: dest
    ; Access field buffer
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable write
    mov eax, [ebp-20]
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    and eax, ebx
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    imul eax, ebx
    pop ebx
    add eax, ebx
    mov [ebp-28], eax
    ; Variable: i
    mov eax, 0
    mov [ebp-32], eax
.L0x600003752220_start:
    ; Load variable i
    mov eax, [ebp-32]
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    cmp ebx, eax
    setl al
    movzx eax, al
    test eax, eax
    jz .L0x600003752220_end
    ; Load variable dest
    mov eax, [ebp-28]
    push eax
    ; Load variable i
    mov eax, [ebp-32]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    push eax
    ; Load variable data
    mov eax, [ebp+12]
    push eax
    ; Load variable i
    mov eax, [ebp-32]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    pop ebx
    push eax
    ; Load variable dest
    mov eax, [ebp-28]
    push eax
    ; Load variable i
    mov eax, [ebp-32]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    pop ebx
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable i
    mov eax, [ebp-32]
    push eax
    ; Load variable i
    mov eax, [ebp-32]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    mov [ebp-32], eax
    jmp .L0x600003752220_start
.L0x600003752220_end:
    mov eax, 0
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x600003750c40_end
.L0x600003750c40_else:
.L0x600003750c40_end:
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    ; Implicit return
    mov esp, ebp
    pop ebp
    ret

; Function: channel_recv (WCET: 1 cycles, Security: 0)
channel_recv:
    push ebp
    mov ebp, esp
    sub esp, 64    ; Local variable space
    ; Access field mode
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable SPSC
    mov eax, [ebp-4]
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x600003752f40_else
    ; Variable: read
    ; Access field read_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-4], eax
    ; Variable: write
    ; Access field write_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-8], eax
    ; Load variable read
    mov eax, [ebp-4]
    push eax
    ; Load variable write
    mov eax, [ebp-8]
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x6000037535d0_else
    ; Access field write_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable write
    mov eax, [ebp-8]
    push eax
    ; Access field write_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    mov [ebp-8], eax
    ; Load variable read
    mov eax, [ebp-4]
    push eax
    ; Load variable write
    mov eax, [ebp-8]
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x600003753d40_else
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x600003753d40_end
.L0x600003753d40_else:
.L0x600003753d40_end:
    jmp .L0x6000037535d0_end
.L0x6000037535d0_else:
.L0x6000037535d0_end:
    ; Variable: src
    ; Access field buffer
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable read
    mov eax, [ebp-4]
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    and eax, ebx
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    imul eax, ebx
    pop ebx
    add eax, ebx
    mov [ebp-12], eax
    ; Variable: i
    mov eax, 0
    mov [ebp-16], eax
.L0x60000375c700_start:
    ; Load variable i
    mov eax, [ebp-16]
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    cmp ebx, eax
    setl al
    movzx eax, al
    test eax, eax
    jz .L0x60000375c700_end
    ; Load variable data
    mov eax, [ebp+12]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    push eax
    ; Load variable src
    mov eax, [ebp-12]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    pop ebx
    push eax
    ; Load variable data
    mov eax, [ebp+12]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    pop ebx
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable i
    mov eax, [ebp-16]
    push eax
    ; Load variable i
    mov eax, [ebp-16]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    mov [ebp-16], eax
    jmp .L0x60000375c700_start
.L0x60000375c700_end:
    ; Inline assembly
mfence
    ; Access field read_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable read
    mov eax, [ebp-4]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    mov eax, 0
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x600003752f40_end
.L0x600003752f40_else:
.L0x600003752f40_end:
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    ; Implicit return
    mov esp, ebp
    pop ebp
    ret

; Function: atomic_fetch_add (WCET: 1 cycles, Security: 0)
atomic_fetch_add:
    push ebp
    mov ebp, esp
    sub esp, 64    ; Local variable space
    ; Inline assembly
mov eax, [ebp+8]
mov ebx, [ebp+12]
lock xadd [eax], ebx
mov eax, ebx
    mov eax, 0
    mov esp, ebp
    pop ebp
    ret
    ; Implicit return
    mov esp, ebp
    pop ebp
    ret

; Function: atomic_fetch_sub (WCET: 1 cycles, Security: 0)
atomic_fetch_sub:
    push ebp
    mov ebp, esp
    sub esp, 64    ; Local variable space
    ; Load variable val
    mov eax, [ebp+12]
    neg eax
    push eax
    ; Load variable addr
    mov eax, [ebp+8]
    push eax
    call atomic_fetch_add
    add esp, 8
    mov esp, ebp
    pop ebp
    ret
    ; Implicit return
    mov esp, ebp
    pop ebp
    ret

; Function: channel_send_batch (WCET: 1 cycles, Security: 0)
channel_send_batch:
    push ebp
    mov ebp, esp
    sub esp, 64    ; Local variable space
    ; Access field mode
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable SPSC
    mov eax, [ebp-4]
    pop ebx
    cmp ebx, eax
    sete al
    movzx eax, al
    test eax, eax
    jz .L0x60000375df10_else
    ; Variable: write
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-4], eax
    ; Variable: read
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-8], eax
    ; Variable: space
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    push eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    ; Load variable read
    mov eax, [ebp-8]
    pop ebx
    sub ebx, eax
    mov eax, ebx
    pop ebx
    sub ebx, eax
    mov eax, ebx
    mov [ebp-12], eax
    ; Load variable space
    mov eax, [ebp-12]
    push eax
    ; Load variable count
    mov eax, [ebp+16]
    pop ebx
    cmp ebx, eax
    setl al
    movzx eax, al
    test eax, eax
    jz .L0x60000375ea00_else
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Access field read_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable space
    mov eax, [ebp-12]
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    push eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    ; Access field read_cache
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    sub ebx, eax
    mov eax, ebx
    pop ebx
    sub ebx, eax
    mov eax, ebx
    pop ebx
    mov [ebp-12], eax
    ; Load variable space
    mov eax, [ebp-12]
    push eax
    ; Load variable count
    mov eax, [ebp+16]
    pop ebx
    cmp ebx, eax
    setl al
    movzx eax, al
    test eax, eax
    jz .L0x60000375f4f0_else
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x60000375f4f0_end
.L0x60000375f4f0_else:
.L0x60000375f4f0_end:
    jmp .L0x60000375ea00_end
.L0x60000375ea00_else:
.L0x60000375ea00_end:
    ; Variable: j
    mov eax, 0
    mov [ebp-16], eax
.L0x60000375f870_start:
    ; Load variable j
    mov eax, [ebp-16]
    push eax
    ; Load variable count
    mov eax, [ebp+16]
    pop ebx
    cmp ebx, eax
    setl al
    movzx eax, al
    test eax, eax
    jz .L0x60000375f870_end
    ; Variable: dest
    ; Access field buffer
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    ; Load variable j
    mov eax, [ebp-16]
    pop ebx
    add eax, ebx
    push eax
    ; Access field mask
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    and eax, ebx
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    imul eax, ebx
    pop ebx
    add eax, ebx
    mov [ebp-20], eax
    ; Variable: src
    ; Load variable data
    mov eax, [ebp+12]
    push eax
    ; Load variable j
    mov eax, [ebp-16]
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    imul eax, ebx
    pop ebx
    add eax, ebx
    mov [ebp-24], eax
    ; Variable: i
    mov eax, 0
    mov [ebp-28], eax
.L0x600003758850_start:
    ; Load variable i
    mov eax, [ebp-28]
    push eax
    ; Access field element_size
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    pop ebx
    cmp ebx, eax
    setl al
    movzx eax, al
    test eax, eax
    jz .L0x600003758850_end
    ; Load variable dest
    mov eax, [ebp-20]
    push eax
    ; Load variable i
    mov eax, [ebp-28]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    push eax
    ; Load variable src
    mov eax, [ebp-24]
    push eax
    ; Load variable i
    mov eax, [ebp-28]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    mov eax, [eax]
    pop ebx
    push eax
    ; Load variable dest
    mov eax, [ebp-20]
    push eax
    ; Load variable i
    mov eax, [ebp-28]
    pop ebx
    lea eax, [ebx + eax*4]    ; Assume 4-byte elements
    pop ebx
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable i
    mov eax, [ebp-28]
    push eax
    ; Load variable i
    mov eax, [ebp-28]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    mov [ebp-28], eax
    jmp .L0x600003758850_start
.L0x600003758850_end:
    ; Load variable j
    mov eax, [ebp-16]
    push eax
    ; Load variable j
    mov eax, [ebp-16]
    push eax
    mov eax, 1
    pop ebx
    add eax, ebx
    pop ebx
    mov [ebp-16], eax
    jmp .L0x60000375f870_start
.L0x60000375f870_end:
    ; Inline assembly
mfence
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    push eax
    ; Load variable write
    mov eax, [ebp-4]
    push eax
    ; Load variable count
    mov eax, [ebp+16]
    pop ebx
    add eax, ebx
    pop ebx
    mov ebx, eax
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    mov [eax], ebx
    mov eax, ebx    ; return assigned value
    ; Load variable count
    mov eax, [ebp+16]
    mov esp, ebp
    pop ebp
    ret
    jmp .L0x60000375df10_end
.L0x60000375df10_else:
.L0x60000375df10_end:
    mov eax, 1
    neg eax
    mov esp, ebp
    pop ebp
    ret
    ; Implicit return
    mov esp, ebp
    pop ebp
    ret

; Function: channel_peek (WCET: 1 cycles, Security: 0)
channel_peek:
    push ebp
    mov ebp, esp
    sub esp, 64    ; Local variable space
    ; Variable: read
    ; Access field read_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-4], eax
    ; Variable: write
    ; Access field write_pos
    ; Load variable ch
    mov eax, [ebp+8]
    mov eax, [eax]
    add eax, 0    ; no type info
    mov eax, [eax]
    mov [ebp-8], eax
    ; Load variable write
    mov eax, [ebp-8]
    push eax
    ; Load variable read
    mov eax, [ebp-4]
    pop ebx
    sub ebx, eax
    mov eax, ebx
    mov esp, ebp
    pop ebp
    ret
    ; Implicit return
    mov esp, ebp
    pop ebp
    ret
