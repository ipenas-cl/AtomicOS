{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(make:*)",
      "Bash(brew install:*)",
      "Bash(chmod:*)",
      "Bash(./build_simple.sh)",
      "Bash(brew list:*)",
      "Bash(./test_atomicos.sh:*)",
      "Bash(ls:*)",
      "Bash(i686-elf-nm:*)",
      "Bash(find:*)",
      "Bash(/usr/local/bin/qemu-system-i386:*)",
      "Bash(gcc:*)",
      "Bash(./test_no_qemu)",
      "Bash(killall:*)",
      "Bash(true)",
      "Bash(./simulate_boot)",
      "Bash(touch:*)",
      "Bash(./test_comprehensive)",
      "Bash(qemu-system-i386:*)",
      "Bash(brew reinstall:*)",
      "Bash(brew uninstall:*)",
      "Bash(sysctl:*)",
      "Bash(timeout:*)",
      "Bash(i686-elf-gcc:*)",
      "Bash(i686-elf-ld:*)",
      "Bash(grep:*)",
      "Bash(./test_v3.sh:*)",
      "Bash(./test_everything)",
      "Bash(./test_real.sh:*)",
      "Bash(./quick_test.sh:*)",
      "Bash(objdump:*)",
      "Bash(./tempo_compiler:*)",
      "Bash(cat:*)",
      "Bash(./test_crypto)",
      "Bash(./test_all_real.sh:*)",
      "Bash(./test_visual.sh:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(git config:*)",
      "Bash(git checkout:*)",
      "Bash(rm:*)",
      "Bash(gh repo view:*)",
      "Bash(python3:*)",
      "Bash(cp:*)",
      "Bash(curl:*)",
      "Bash(git tag:*)",
      "Bash(git merge:*)",
      "Bash(mv:*)",
      "Bash(./run_v6.sh:*)",
      "Bash(rg:*)",
      "Bash(readelf:*)",
      "Bash(i686-elf-grub-mkrescue:*)",
      "Bash(nm:*)",
      "Bash(grub-mkrescue:*)",
      "Bash(./test_kernel.sh:*)",
      "Bash(cc:*)",
      "Bash(./build_interactive.sh:*)",
      "Bash(./build.sh)",
      "Bash(./build_complete.sh)",
      "Bash(./build_native.sh:*)",
      "Bash(./build_debug.sh:*)",
      "Bash(./build_shell.sh:*)",
      "Bash(./build_professional.sh:*)",
      "Bash(./cleanup.sh)",
      "Bash(./build_fixed.sh)",
      "Bash(./test_vga.sh:*)",
      "Bash(sed:*)",
      "Bash(./build_test.sh)",
      "Bash(./test_tempo.sh:*)",
      "Bash(./test_debug.sh:*)",
      "Bash(/Users/ignacioenlosmercados/Documents/OS-CLAUDE/test_debug.sh:*)",
      "Bash(nasm:*)",
      "Bash(dd:*)",
      "Bash(pkill:*)",
      "Bash(./test_aslr)",
      "Bash(./test_wx)",
      "Bash(../AtomicOS-Clean/build/tempo_compiler:*)",
      "Bash(./build/tempo_compiler examples/simple_test.tempo build/test.s)",
      "WebFetch(domain:github.com)",
      "Bash(git reset:*)",
      "Bash(git rm:*)",
      "Bash(gtimeout:*)",
      "Bash(build/tempo_compiler:*)",
      "Bash(scripts/pre-commit.sh:*)",
      "Bash(./build/tempo_v4:*)",
      "Bash(./build/tempo_compiler:*)",
      "Bash(./build/tempo_enhanced_simple:*)",
      "Bash(tree:*)",
      "Bash(xxd:*)",
      "Bash(./show_os_status.sh:*)",
      "Bash(./test_boot)",
      "Bash(kill:*)",
      "Bash(./run_direct.sh)",
      "Bash(./test_security_init.sh:*)",
      "Bash(./backups/pre-v1.0.0/tempo_compiler_v3:*)",
      "Bash(diff:*)",
      "Bash(../build/tempo_compiler simple_test.tempo test_output.s)",
      "Bash(./test_v3:*)",
      "Bash(awk:*)",
      "Bash(./fix_tempo_syntax.sh:*)",
      "Bash(od:*)",
      "Bash(./build_macos.sh:*)",
      "Bash(./build_macos_fixed.sh:*)",
      "Bash(as:*)",
      "Bash(ld:*)",
      "Bash(./build_native_tempo.sh:*)",
      "Bash(./build_native_tempo_fixed.sh:*)",
      "Bash(./build_tempo_native.sh:*)",
      "Bash(./build_native_compiler.sh:*)",
      "Bash(clang:*)",
      "Bash(./build/test)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(./build/test69)",
      "Bash(./build/tempo_pure)",
      "Bash(./demo_linker_pure.sh:*)",
      "Bash(./demo_linker_v2.sh:*)",
      "Bash(./demo_linker_final.sh:*)",
      "Bash(./build_100_percent_native.sh:*)",
      "Bash(./COMPILADOR_TEMPO_REAL.sh:*)",
      "Bash(./build_tempo_toolchain.sh:*)",
      "Bash(./demo_tempo_toolchain.sh:*)",
      "Bash(./compile_kernel_tempo.sh)",
      "Bash(./scripts/install.sh:*)",
      "Bash(tempo:*)",
      "Bash(echo $?)",
      "Bash(./tools/build_secure_compiler.sh:*)",
      "Bash(./build/secure/tempo_secure examples/test_secure.tempo build/test_secure.s)",
      "Bash(./build/secure/tempo_secure_demo examples/test_secure.tempo build/test_secure_protected.s)",
      "Bash(./build/test_secure_protected)",
      "Bash(./tempo help)",
      "Bash(./tempo examples/test_secure.tempo)",
      "Bash(echo:*)",
      "Bash(# Crear estructura de directorios\nmkdir -p scripts/demos\nmkdir -p scripts/monitoring\nmkdir -p docs/milestones\nmkdir -p examples/demos)",
      "Bash(# Mover scripts de demo\nmv demo_tempo_toolchain.sh scripts/demos/\nmv tempo_monitor_integrated.sh scripts/demos/\n\n# Mover scripts de monitoreo\nmv tempo_incident_manager.sh scripts/monitoring/\nmv tempo_monitor_enhanced.sh scripts/monitoring/\n\n# Mover scripts de build a scripts/\nmv build_tempo_toolchain.sh scripts/\nmv compile_kernel_tempo.sh scripts/\nmv run_atomicos.sh scripts/\n\n# Mover archivos Tempo de ejemplo\nmv tempo_self_hosted_compiler.tempo examples/demos/)",
      "Bash(# Mover documentación de hitos\nmv HISTORIC_MILESTONE.md docs/milestones/\nmv COMPILER_EVOLUTION.md docs/milestones/\nmv KERNEL_TEMPO_MILESTONE.md docs/milestones/\nmv ATOMIC_ECOSYSTEM_VISION.md docs/milestones/\nmv CLEANUP_PLAN.md docs/milestones/ 2>/dev/null || true\nmv COMPARISON.md docs/ 2>/dev/null || true)",
      "Bash(# Ver qué archivos MD hay en la raíz\nls *.md | grep -v README | grep -v CHANGELOG | grep -v LICENSE)",
      "Bash(# Mover archivos de documentación\nmv AUTHORS.md COPYRIGHT.md docs/\nmv CLEANUP_SUMMARY.md REPOSITORY_CLEANUP_PLAN.md docs/milestones/ 2>/dev/null || true\nmv PHILOSOPHY.md docs/\nmv INSTALL.md QUICK_START.md docs/)",
      "Bash(# Crear un README en scripts/ para explicar qué hace cada script\ncat > scripts/README.md << 'EOF'\n# Scripts Directory\n\n## Build Scripts\n- `build_tempo_toolchain.sh` - Builds the complete Tempo toolchain\n- `compile_kernel_tempo.sh` - Compiles the AtomicOS kernel\n- `run_atomicos.sh` - Runs AtomicOS in QEMU\n\n## Demo Scripts (scripts/demos/)\n- `demo_tempo_toolchain.sh` - Demonstrates Tempo compiler features\n- `tempo_monitor_integrated.sh` - Shows integrated monitoring capabilities\n\n## Monitoring Scripts (scripts/monitoring/)\n- `tempo_incident_manager.sh` - Production incident response system\n- `tempo_monitor_enhanced.sh` - Enhanced monitoring dashboard\n\n## Pre-commit Hook\n- `pre-commit.sh` - Run before committing (tests, linting, etc.)\nEOF)",
      "Bash(# Ahora ver qué queda en la raíz\nls -la | grep -E \"\\.(sh|tempo|md)$\" | grep -v README | grep -v CHANGELOG | grep -v LICENSE)",
      "Bash(# Verificar la estructura nueva\necho \"=== ESTRUCTURA ORGANIZADA ===\"\necho \"\"\necho \"AtomicOS/\"\necho \"├── README.md          (Principal)\"\necho \"├── CHANGELOG.md       (Historial de cambios)\"\necho \"├── LICENSE            (MIT License)\"\necho \"├── VERSION            (5.0.0)\"\necho \"├── Makefile           (Build principal)\"\necho \"│\"\necho \"├── src/               (Código fuente)\"\necho \"│   ├── bootloader/\"\necho \"│   ├── kernel/\"\necho \"│   └── services/      (tempo-web, tempo-mail, tempo-db)\"\necho \"│\"\necho \"├── tools/             (Compiladores y herramientas)\"\necho \"│   ├── tempo_compiler.c\"\necho \"│   ├── tempo_compiler_v2.c\"\necho \"│   └── self_hosted/\"\necho \"│\"\necho \"├── scripts/           (Scripts de utilidad)\"\necho \"│   ├── build_tempo_toolchain.sh\"\necho \"│   ├── compile_kernel_tempo.sh\"\necho \"│   ├── run_atomicos.sh\"\necho \"│   ├── pre-commit.sh\"\necho \"│   ├── demos/        (Demos y ejemplos)\"\necho \"│   └── monitoring/   (Herramientas de monitoreo)\"\necho \"│\"\necho \"├── examples/          (Código Tempo de ejemplo)\"\necho \"│   └── demos/\"\necho \"│\"\necho \"├── tests/             (Suite de pruebas)\"\necho \"│\"\necho \"├── docs/              (Documentación)\"\necho \"│   ├── index.html     (GitHub Pages)\"\necho \"│   ├── AUTHORS.md\"\necho \"│   ├── COPYRIGHT.md\"\necho \"│   ├── PHILOSOPHY.md\"\necho \"│   ├── INSTALL.md\"\necho \"│   ├── QUICK_START.md\"\necho \"│   └── milestones/    (Documentación histórica)\"\necho \"│\"\necho \"└── build/             (Archivos generados)\")",
      "Bash(# Limpiar archivos Tempo sueltos en la raíz\nls *.tempo 2>/dev/null | head -20)",
      "Bash(# Actualizar .gitignore para mantener limpio\ncat >> .gitignore << 'EOF'\n\n# Keep root directory clean\n/*.tempo\n/*.sh\n/*.md\n!README.md\n!CHANGELOG.md\n!LICENSE\n!VERSION\n!Makefile\n\n# Temporary files\n*.tmp\n*.log\n*.out\nEOF)",
      "Bash(./scripts/update_copyright_year.sh:*)"
    ],
    "deny": []
  }
}